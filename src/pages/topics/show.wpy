<style lang="less">
page{
    background-color: #FFFFFF;
}
.avatar-wrap {
  position: relative;
  margin-right: 10px;
}
.avatar {
  width: 50px;
  height: 50px;
  display: block;
  border-radius: 50%;
}
.topic-title {
  padding: 15px;
}
</style>
<template>
    <view class="page">
        <view class="page__bd">
        <view class="weui-cells weui-cells_after-title">
            <navigator class="weui-cell" url="/pages/users/show?id={{ topic.user.id }}" open-type="redirect">
            <view class="weui-cell__hd avatar-wrap">
                <image class="avatar" src="{{ topic.user.avatar }}"/>
            </view>
            <view class="weui-cell__bd">
                <view>{{ topic.user.name }}</view>
                <view class="page__desc">{{ topic.user.introduction }}</view>
            </view>

            <!-- 向右的箭头 -->
            <view class="weui-cell__ft weui-cell__ft_in-access"></view>
            </navigator>
        </view>
        <view class="topic-title">
            <view class="page__title">{{ topic.title }}</view>
            <view class="weui-media-box__info topic-info">
            <view class="weui-media-box__info__meta">{{ topic.category.name }} • </view>
            <view class="weui-media-box__info__meta">{{ topic.updated_at_diff }} • </view>
            <view class="weui-media-box__info__meta">{{ topic.reply_count }} 次回复</view>
            </view>
        </view>
        <view class="weui-article">
            <rich-text nodes="{{ topic.body }}" bindtap="tap"></rich-text>
            <button wx:if="{{ canDelete }}" @tap="deleteTopic" class="weui-btn mini-btn" type="default" size="mini">删除</button>
        </view>
        </view>
    </view>
</template>
<script>
import wepy from 'wepy'
import api from '@/utils/api'
import util from '@/utils/util'

export default class TopicShow extends wepy.page {
  config = {
    navigationBarTitleText: '话题详情'
  }
  data = {
    // 话题数据
    topic: null,
    // 当前登录用户
    user: null
  }
  // 计算属性
  computed = {
    canDelete() {
      if (!this.user || !this.topic) {
        return false
      }
          // 当前用户是否是帖子的发布者
      return this.user.id === this.topic.user_id
    }
  }
  methods = {
    async deleteTopic() {
          // 删除确认
      let res = await wepy.showModal({
        title: '确认删除',
        content: '确认删除该话题吗？',
        confirmText: '删除',
        cancelText: '取消'
      })
          // 用户点击取消则返回
      if (!res.confirm) {
        return
      }
          // 调用删除接口
      let deleteResponse = await api.authRequest({
        url: 'topics/' + this.topic.id,
        method: 'delete'
      })
          // 删除成功 给出提示
      if (deleteResponse.statusCode === 204) {
        wepy.showModal({
          title: '删除成功',
          icon: 'success'
        })
      }
          // 2秒后返回上一页
      setTimeout(function() {
        wepy.navigateBack()
      }, 2000)
    }
  }
    // 获取话题数据
  async getTopic(id) {
    try {
      let topicResponse = await api.request({
        url: 'topics/' + id,
        data: {
          include: 'category,user,topReplies.user'
        }
      })
      
      let topic = topicResponse.data

            // 格式化updated_at数据
      topic.updated_at_diff = util.diffForHumans(topic.updated_at)
      this.topic = topic
      this.$apply()
    } catch (err) {
      console.log(err)
      wepy.showModal({
        title: '提示',
        content: '服务器错误 请联系管理员'
      })
    }
  }
  async onLoad(options) {
    await this.getTopic(options.id)
    // 获取当前登录用户
    this.user = await this.$parent.getCurrentUser()
    this.$apply()
  }
}
</script>
